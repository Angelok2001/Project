// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Progect.Data;

#nullable disable

namespace Progect.Migrations
{
    [DbContext(typeof(ProgectContext))]
    [Migration("20221112163218_ppLaba1")]
    partial class ppLaba1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Progect.Models.Documents", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AccessCount")
                        .HasColumnType("int");

                    b.Property<string>("DocumentDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FunctionalAreaID")
                        .HasColumnType("int");

                    b.Property<string>("OtherDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<int>("StructureID")
                        .HasColumnType("int");

                    b.Property<int>("StructuresID")
                        .HasColumnType("int");

                    b.Property<int>("TypesID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("FunctionalAreaID");

                    b.HasIndex("RoleID");

                    b.HasIndex("StructuresID");

                    b.HasIndex("TypesID");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Progect.Models.FunctionalArea", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("FunctionalAreaDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParrentID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ParrentID");

                    b.ToTable("FunctionalArea");
                });

            modelBuilder.Entity("Progect.Models.Images", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ImadeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImadeUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageAltText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SectionsID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("SectionsID");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Progect.Models.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("CrudeValue")
                        .HasColumnType("bit");

                    b.Property<string>("RoleDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Progect.Models.Sections", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("DocumentID")
                        .HasColumnType("int");

                    b.Property<int>("DocumentsID")
                        .HasColumnType("int");

                    b.Property<string>("SectionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SectionTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("DocumentsID");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("Progect.Models.Structures", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ParrentID")
                        .HasColumnType("int");

                    b.Property<string>("StructureDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ParrentID");

                    b.ToTable("Structures");
                });

            modelBuilder.Entity("Progect.Models.Types", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("TupeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("Progect.Models.Users", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("OtherDatails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<string>("UserLogin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Progect.Models.Documents", b =>
                {
                    b.HasOne("Progect.Models.FunctionalArea", "FunctionalArea")
                        .WithMany("Documents")
                        .HasForeignKey("FunctionalAreaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Progect.Models.Role", "Role")
                        .WithMany("Documents")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Progect.Models.Structures", "Structures")
                        .WithMany("Documents")
                        .HasForeignKey("StructuresID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Progect.Models.Types", "Types")
                        .WithMany("Documents")
                        .HasForeignKey("TypesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FunctionalArea");

                    b.Navigation("Role");

                    b.Navigation("Structures");

                    b.Navigation("Types");
                });

            modelBuilder.Entity("Progect.Models.FunctionalArea", b =>
                {
                    b.HasOne("Progect.Models.FunctionalArea", "Parrent")
                        .WithMany("functionalArea")
                        .HasForeignKey("ParrentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parrent");
                });

            modelBuilder.Entity("Progect.Models.Images", b =>
                {
                    b.HasOne("Progect.Models.Sections", "Sections")
                        .WithMany("Images")
                        .HasForeignKey("SectionsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("Progect.Models.Sections", b =>
                {
                    b.HasOne("Progect.Models.Documents", "Documents")
                        .WithMany("Sections")
                        .HasForeignKey("DocumentsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Documents");
                });

            modelBuilder.Entity("Progect.Models.Structures", b =>
                {
                    b.HasOne("Progect.Models.Structures", "Parrent")
                        .WithMany("structures")
                        .HasForeignKey("ParrentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parrent");
                });

            modelBuilder.Entity("Progect.Models.Users", b =>
                {
                    b.HasOne("Progect.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Progect.Models.Documents", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("Progect.Models.FunctionalArea", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("functionalArea");
                });

            modelBuilder.Entity("Progect.Models.Role", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Progect.Models.Sections", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("Progect.Models.Structures", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("structures");
                });

            modelBuilder.Entity("Progect.Models.Types", b =>
                {
                    b.Navigation("Documents");
                });
#pragma warning restore 612, 618
        }
    }
}
